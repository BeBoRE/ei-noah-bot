name: Docker Build en Deploy

on:
  push:
    # Publish `master` as Docker `latest` image.
    branches:
      - master

    # Publish `v1.2.3` tags as releases.
    tags:
      - v*

  # Run tests for any PRs.
  pull_request:

env:
  IMAGE_NAME: ei-noah
  # Push image to GitHub Packages.
  # See also https://docs.docker.com/docker-hub/builds/

jobs:
  test:
    name: ✅ Test Build
    runs-on: ubuntu-latest
    if: github.event_name != 'push'

    steps:
      - uses: actions/checkout@v2

      - name: 🧪 Run Tests
        run: |
          if [ -f docker-compose.test.yml ]; then
            docker-compose --file docker-compose.test.yml build
            docker-compose --file docker-compose.test.yml run sut
          else
            docker build . --file Dockerfile
          fi
  # Push image to GitHub Packages.
  # See also https://docs.docker.com/docker-hub/builds/
  push:
    name: ☁ Push to Repository
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - uses: actions/checkout@v2

      - name: 🔨 Build Image
        run: docker build . --file Dockerfile --tag $IMAGE_NAME

      - name: 🔑 Login To Registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin

      - name: 🔼 Push image
        run: |
          IMAGE_ID=docker.pkg.github.com/${{ github.repository }}/$IMAGE_NAME

          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest

          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION

          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
          docker tag $IMAGE_NAME $IMAGE_ID:${{ github.sha }}
          docker push $IMAGE_ID
  deploy:
    needs: push
    name: 🎉 Deploy On Server
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
    - name: 🔁 Redeploy on Server
      uses: appleboy/ssh-action@master
      with: 
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.PRIVATE_KEY }}
        script: ./redeploy.sh
  discord:
    needs: deploy
    name: 📃 Publish Changelog
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - uses: actions/checkout@v2
      - name: Get Body en Subject
        run: |
          echo SUBJECT=$(git log --format=%s -n 1) >> $GITHUB_ENV
          echo BODY=$(git log --format=%b -n 1 | sed -E ':a;N;$!ba;s/\r{0,1}\n/\\n/g') >> $GITHUB_ENV
      - name: Send Discord Message
        uses: tsickert/discord-webhook@v1.0.1
        with:
          webhook-url: ${{ secrets.WEBHOOK_URL }}
          username: ei Noah
          avatar-url: https://cdn.discordapp.com/avatars/730913870805336195/693419adb85f1416a0ec91d09864f1e4.png?size=256
          content: "**${{ env.SUBJECT }}**\\n${{ env.BODY }}"
